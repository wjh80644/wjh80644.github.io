<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wjh80644.github.io/blog</id>
    <title>My Site Blog</title>
    <updated>2023-07-30T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wjh80644.github.io/blog"/>
    <subtitle>My Site Blog</subtitle>
    <icon>https://wjh80644.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[React自定义hook]]></title>
        <id>https://wjh80644.github.io/blog/React自定义hook</id>
        <link href="https://wjh80644.github.io/blog/React自定义hook"/>
        <updated>2023-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[自定义hook]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="自定义hook">自定义hook<a href="#自定义hook" class="hash-link" aria-label="自定义hook的直接链接" title="自定义hook的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">// 使用自定义hook来复用代码逻辑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import { useEffect, useState } from "react";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function useWindowSize() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const [windowSize, setWindowSize] = useState({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    width: window.innerWidth,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    height: window.innerHeight,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;!--truncate--&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  useEffect(() =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const handleResize = () =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      setWindowSize({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        width: window.innerWidth,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        height: window.innerHeight,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 浏览器窗口发生变化时，改变windowSize</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    window.addEventListener("resize", handleResize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return () =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      window.removeEventListener("resize", handleResize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }, []);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // hook里面返回一个状态、函数或数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return windowSize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export default useWindowSize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// --------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import { useEffect, useState } from "react";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import "./App.css";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import useWindowSize from "./hooks/useWindowSize";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function App() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const windowSize = useWindowSize();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;main className="container"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      &lt;div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1&gt;Width: {windowSize.width}&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1&gt;Height: {windowSize.height}&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/main&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export default App;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="给hook添加参数">给hook添加参数<a href="#给hook添加参数" class="hash-link" aria-label="给hook添加参数的直接链接" title="给hook添加参数的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import { useEffect, useState } from "react";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function useWindowSize(throttleDuration = 100) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const [windowSize, setWindowSize] = useState({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    width: window.innerWidth,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    height: window.innerHeight,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  useEffect(() =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    let timeoutId = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const handleResize = () =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (!timeoutId) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        timeoutId = setTimeout(() =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          setWindowSize({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            width: window.innerWidth,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            height: window.innerHeight,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          timeoutId = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }, throttleDuration);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    window.addEventListener("resize", handleResize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return () =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      clearInterval(timeoutId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      window.removeEventListener("resize", handleResize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }, [throttleDuration]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return windowSize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export default useWindowSize;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="多个hook联用">多个hook联用<a href="#多个hook联用" class="hash-link" aria-label="多个hook联用的直接链接" title="多个hook联用的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import { useState, useEffect } from "react";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const breakpoints = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  { name: "mobile", width: 480 },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  { name: "tablet", width: 768 },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  { name: "laptop", width: 1024 },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  { name: "desktop", width: 1440 },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function useBreakpoint(windowWidth) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const initialBreakPoint = breakpoints.find(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    (breakpoint) =&gt; windowWidth &lt;= breakpoint.width</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const [currentBreakpoint, setCurrentBreakpoint] = useState(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    initialBreakPoint?.name || "unknown"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  useEffect(() =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (const breakpoint of breakpoints) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (windowWidth &lt;= breakpoint.width) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setCurrentBreakpoint(breakpoint.name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }, [windowWidth]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return currentBreakpoint;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export default useBreakpoint;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import "./App.css";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import ResponsiveContent from "./components/ResponsiveContent";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import useWindowSize from "./hooks/useWindowSize";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import useBreakpoint from "./hooks/useBreakPoint";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function App() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const windowSize = useWindowSize(500);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const breakpoint = useBreakpoint(windowSize.width); </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // breakpoint的值会随着windowSize.width的值改变而改变</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // 说明前面hook的返回值会变化，那么后面hook的参数也会跟着变化</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;main className="container"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      &lt;div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1&gt;Width: {windowSize.width}&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1&gt;Height: {windowSize.height}&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &lt;h1&gt;Break Point: {breakpoint}&lt;/h1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      &lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      &lt;ResponsiveContent /&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/main&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export default App;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>Wjh</name>
            <uri>https://github.com/wjh80644</uri>
        </author>
        <category label="react" term="react"/>
        <category label="hook" term="hook"/>
    </entry>
</feed>